module AES_Stream_Cipher_tb;

  // Define module inputs and outputs
  reg clk = 1'b0;
  always #5 clk = !clk; // Clock period of 10 units
  
  reg rst_n = 1'b0;
  initial #20 rst_n = 1'b1; // Reset changes just one time 

  reg in_valid = 1'b0;
  reg [7:0] key;
  reg [7:0] input_data;
  reg new_message = 1'b1;
  reg is_ciphertext = 1'b0;
  wire output_valid;
  wire [7:0] output_byte;

  // Instantiate AES_Stream_Cipher module
  AES_Stream_Cipher U0 (
     .clk(clk),
     .rst_n(rst_n),
     .key(key),
     .input_valid(in_valid),
     .new_message(new_message),
     .is_ciphertext(is_ciphertext),
     .input_data(input_data),
     .output_valid(output_valid),
     .output_byte(output_byte)
  );
  
  // Define test vectors
  reg [7:0] tv_key [10];
  reg [7:0] tv_input_data [10];
  reg [7:0] tv_output_byte [10];
  
  // ---- Stimuli routine
  initial begin
    
    // Load test vectors from files
    $readmemh("tv/key.txt", tv_key);
    $readmemh("tv/input_data.txt", tv_input_data);
    
    // Wait for reset and clock edge
    @(posedge rst_n);
    @(posedge clk);
    
    // Loop through test vectors
    for(int i = 0; i < 10; i++) begin
	  
      new_message= 1'b0;
      @ (posedge clk);
      key = tv_key[0];
      input_data = tv_input_data[i];
      in_valid = 1'b1;
      $display($time, " Stimulus: key=%h, input_data=%h, in_valid=%b", key, input_data, in_valid);
    end
    
    
  end
  
  // ---- Check routine
  initial begin
    
    // Load expected output from file
    $readmemh("tv/output_byte.txt", tv_output_byte);
    
    // Wait for reset and clock edge
    @(posedge rst_n);
    @(posedge clk);
    
    // Loop through test vectors
    for(int i = 0; i < 10; i++) begin
      // Wait for output valid signal
      wait(output_valid) @ (posedge clk);
      
      // Compare output with expected output
      if(output_byte !== tv_output_byte[i])
        $display ($time, " Check: Test %2d := ERROR (expected = %02h, got = %02h)", i + 1, tv_output_byte[i], output_byte);
      else
        $display ($time, " Check: Test %2d := OK", i + 1);     
    end
    
    #10
    new_message = 1'b1; // Reset new_message flag after setting
     
    
    // Stop simulation
    $stop;
    
  end
  
endmodule
